name: Growatt Devices Collection

on:
  schedule:
    # Run every 15 minutes from 6 AM to 7 PM (UTC+7)
    - cron: "*/15 6-19 * * *"
  workflow_dispatch: # Manual trigger option
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'collect'
        type: choice
        options:
          - collect
          - export-only
          - get-device
      device_id:
        description: 'Device ID (serial number) for get-device action'
        required: false
        type: string
      debug:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

jobs:
  collect_devices:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .  # Install the package in development mode
          
      - name: Create output directories
        run: |
          # Create logs directory
          mkdir -p logs
          # Create directory for storing device data
          mkdir -p data/devices
          
      - name: Set Python path
        run: |
          # Add the current directory to PYTHONPATH
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
          
      # Collect all devices from API
      - name: Run device collection
        if: ${{ github.event.inputs.action == 'collect' || github.event.inputs.action == '' || github.event_name == 'schedule' }}
        run: |
          echo "Running device collection..."
          # Create output filename with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          OUTPUT_FILE="data/devices/devices_${TIMESTAMP}.json"
          
          # Run the collector script
          echo "Running devices_data_collector.py to collect data and update database..."
          python scripts/collectors/collect_devices_data.py collect
          
          # Export the data to a JSON file
          echo "Exporting collected data to $OUTPUT_FILE"
          python scripts/collectors/collect_devices_data.py export --output "$OUTPUT_FILE"
          
          echo "Device collection completed"
        env:
          # Database connection
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # Growatt API credentials
          GROWATT_USERNAME: ${{ secrets.GROWATT_USERNAME }}
          GROWATT_PASSWORD: ${{ secrets.GROWATT_PASSWORD }}
          # Optional: Timezone setting
          TZ: "Asia/Bangkok" # Set to Thai timezone
          # Debug flag
          DEBUG: ${{ github.event.inputs.debug == 'true' && 'true' || 'false' }}
      
      # Export-only mode - just export devices from database to JSON
      - name: Export devices only
        if: ${{ github.event.inputs.action == 'export-only' }}
        run: |
          echo "Running export-only mode..."
          # Create output filename with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          OUTPUT_FILE="data/devices/devices_${TIMESTAMP}.json"
          
          # Export the data to a JSON file
          echo "Exporting database data to $OUTPUT_FILE"
          python scripts/collectors/collect_devices_data.py export --output "$OUTPUT_FILE"
          
          echo "Device export completed"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DEBUG: ${{ github.event.inputs.debug == 'true' && 'true' || 'false' }}
      
      # Get specific device info
      - name: Get device by ID
        if: ${{ github.event.inputs.action == 'get-device' && github.event.inputs.device_id != '' }}
        run: |
          echo "Getting device details for ID: ${{ github.event.inputs.device_id }}"
          DEVICE_ID="${{ github.event.inputs.device_id }}"
          OUTPUT_FILE="data/devices/device_${DEVICE_ID}_$(date +%Y%m%d_%H%M%S).json"
          
          # Get device info and save to file
          python scripts/collectors/collect_devices_data.py get "$DEVICE_ID" --json | tee "$OUTPUT_FILE"
          
          echo "Device details saved to $OUTPUT_FILE"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DEBUG: ${{ github.event.inputs.debug == 'true' && 'true' || 'false' }}
          
      - name: Check results
        run: |
          echo "Checking collected/exported data files:"
          ls -la data/devices/
          
          # Check the log files
          echo "Log files:"
          ls -la logs/
          
          # Show last 20 lines of logs if debug is enabled
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            echo "Debug logs (last 20 lines):"
            for log in logs/*.log; do
              echo "=== $log ==="
              tail -n 20 "$log"
              echo ""
            done
          fi
          
      - name: Upload device data as artifact
        uses: actions/upload-artifact@v4
        with:
          name: device-data-${{ github.run_id }}
          path: data/devices/*.json
          if-no-files-found: warn
          
      - name: Upload logs as artifact
        if: ${{ github.event.inputs.debug == 'true' || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_id }}
          path: logs/*.log
          if-no-files-found: warn
